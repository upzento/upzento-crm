generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  domain    String?  @unique
  plan      String   @default("free")
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agencies  Agency[]
  users     User[]
}

model Agency {
  id           String   @id @default(uuid())
  name         String
  logo         String?
  primaryColor String?
  tenantId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clients      Client[]
  users        User[]
}

model Client {
  id               String             @id @default(uuid())
  name             String
  logo             String?
  primaryColor     String?
  agencyId         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Campaign         Campaign[]
  ChatConversation ChatConversation[]
  ChatWidget       ChatWidget[]
  agency           Agency             @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Coupon           Coupon[]
  Order            Order[]
  Product          Product[]
  ProductCategory  ProductCategory[]
  ShopWidget       ShopWidget[]
  users            User[]
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  firstName        String
  lastName         String
  role             Role               @default(CLIENT_USER)
  tenantId         String?
  agencyId         String?
  clientId         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ChatConversation ChatConversation[]
  ChatMessage      ChatMessage[]
  Order            Order[]
  agency           Agency?            @relation(fields: [agencyId], references: [id])
  client           Client?            @relation(fields: [clientId], references: [id])
  tenant           Tenant?            @relation(fields: [tenantId], references: [id])
}

model Campaign {
  id                String              @id
  name              String
  description       String?
  type              String
  status            String              @default("draft")
  clientId          String
  createdById       String?
  scheduledAt       DateTime?
  sentAt            DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  Client            Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  CampaignAnalytics CampaignAnalytics?
  CampaignToSegment CampaignToSegment[]
}

model CampaignAnalytics {
  id           String   @id
  campaignId   String   @unique
  sent         Int      @default(0)
  delivered    Int      @default(0)
  opened       Int      @default(0)
  clicked      Int      @default(0)
  replied      Int      @default(0)
  bounced      Int      @default(0)
  unsubscribed Int      @default(0)
  conversions  Int      @default(0)
  revenue      Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model CampaignSegment {
  id                String              @id
  name              String
  description       String?
  filterRules       Json?
  clientId          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  CampaignToSegment CampaignToSegment[]
}

model CampaignToSegment {
  campaignId      String
  segmentId       String
  createdAt       DateTime        @default(now())
  Campaign        Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  CampaignSegment CampaignSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@id([campaignId, segmentId])
}

model ChatConversation {
  id           String                 @id
  visitorName  String?
  visitorEmail String?
  widgetId     String?
  clientId     String
  status       ChatConversationStatus @default(OPEN)
  source       ChatSource             @default(WEBSITE)
  assignedToId String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime
  User         User?                  @relation(fields: [assignedToId], references: [id])
  Client       Client                 @relation(fields: [clientId], references: [id], onDelete: Cascade)
  ChatWidget   ChatWidget?            @relation(fields: [widgetId], references: [id])
  ChatMessage  ChatMessage[]
}

model ChatMessage {
  id               String           @id
  conversationId   String
  content          String
  isFromVisitor    Boolean          @default(false)
  read             Boolean          @default(false)
  sentById         String?
  attachments      Json?
  createdAt        DateTime         @default(now())
  ChatConversation ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User             User?            @relation(fields: [sentById], references: [id])
}

model ChatWidget {
  id               String             @id
  name             String
  clientId         String
  primaryColor     String             @default("#3B82F6")
  welcomeMessage   String             @default("Hello! How can we help you today?")
  offlineMessage   String             @default("We're currently offline. Leave a message and we'll get back to you.")
  position         String             @default("right")
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  ChatConversation ChatConversation[]
  Client           Client             @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Coupon {
  id               String             @id
  code             String             @unique
  type             String
  value            Decimal?
  minOrderAmount   Decimal?
  maxUses          Int?
  usageCount       Int                @default(0)
  startDate        DateTime?
  endDate          DateTime?
  isActive         Boolean            @default(true)
  clientId         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  Client           Client             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  CouponToCategory CouponToCategory[]
  CouponToProduct  CouponToProduct[]
  Order            Order[]
}

model CouponToCategory {
  couponId        String
  categoryId      String
  createdAt       DateTime        @default(now())
  ProductCategory ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Coupon          Coupon          @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@id([couponId, categoryId])
}

model CouponToProduct {
  couponId  String
  productId String
  createdAt DateTime @default(now())
  Coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([couponId, productId])
}

model Order {
  id              String       @id
  orderNumber     String       @unique
  status          String       @default("PENDING")
  customerName    String?
  customerEmail   String?
  contactId       String?
  userId          String?
  couponCode      String?
  subtotal        Decimal
  discountTotal   Decimal      @default(0)
  shippingTotal   Decimal      @default(0)
  taxTotal        Decimal      @default(0)
  total           Decimal
  shippingAddress Json?
  billingAddress  Json?
  paymentMethod   String?
  paymentStatus   String?
  clientId        String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  Client          Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Coupon          Coupon?      @relation(fields: [couponCode], references: [code])
  User            User?        @relation(fields: [userId], references: [id])
  OrderEvent      OrderEvent[]
  OrderItem       OrderItem[]
}

model OrderEvent {
  id        String   @id
  orderId   String
  type      String
  data      Json?
  createdAt DateTime @default(now())
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id             String          @id
  orderId        String
  productId      String?
  variantId      String?
  quantity       Int
  price          Decimal
  total          Decimal
  productName    String
  variantName    String?
  productOptions Json?
  createdAt      DateTime        @default(now())
  Order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product        Product?        @relation(fields: [productId], references: [id])
  ProductVariant ProductVariant? @relation(fields: [variantId], references: [id])
}

model Product {
  id                String              @id
  name              String
  description       String?
  price             Decimal
  sku               String?
  status            String              @default("ACTIVE")
  isFeatured        Boolean             @default(false)
  images            String[]
  inventory         Int?
  clientId          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  CouponToProduct   CouponToProduct[]
  OrderItem         OrderItem[]
  Client            Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  ProductToCategory ProductToCategory[]
  ProductVariant    ProductVariant[]
}

model ProductCategory {
  id                    String              @id
  name                  String
  description           String?
  image                 String?
  parentId              String?
  clientId              String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime
  CouponToCategory      CouponToCategory[]
  Client                Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  ProductCategory       ProductCategory?    @relation("ProductCategoryToProductCategory", fields: [parentId], references: [id])
  other_ProductCategory ProductCategory[]   @relation("ProductCategoryToProductCategory")
  ProductToCategory     ProductToCategory[]
}

model ProductToCategory {
  productId       String
  categoryId      String
  createdAt       DateTime        @default(now())
  ProductCategory ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model ProductVariant {
  id        String      @id
  name      String
  price     Decimal
  sku       String?
  inventory Int?
  options   Json?
  productId String
  createdAt DateTime    @default(now())
  updatedAt DateTime
  OrderItem OrderItem[]
  Product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ShopWidget {
  id             String   @id
  name           String
  type           String   @default("PRODUCTS")
  isActive       Boolean  @default(true)
  theme          Json?
  settings       Json?
  allowedDomains String[] @default([])
  clientId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum Role {
  SUPER_ADMIN
  ADMIN
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_USER
  CLIENT_OWNER
  CLIENT_ADMIN
  CLIENT_USER
}

enum ChatConversationStatus {
  OPEN
  CLOSED
  PENDING
}

enum ChatSource {
  WEBSITE
  WHATSAPP
  FACEBOOK
  EMAIL
}
