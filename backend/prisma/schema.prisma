// This is a simplified Prisma schema file for Upzento CRM deployment
// Learn more about Prisma: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core models for multi-tenancy

model Tenant {
  id          String    @id @default(uuid())
  name        String
  domain      String?   @unique
  plan        String    @default("free")
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  agencies    Agency[]
  users       User[]
}

model Agency {
  id          String    @id @default(uuid())
  name        String
  logo        String?
  primaryColor String?
  tenantId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clients     Client[]
  users       User[]
}

model Client {
  id          String    @id @default(uuid())
  name        String
  logo        String?
  primaryColor String?
  agencyId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  agency      Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  users       User[]
  campaigns   Campaign[]
  chatWidgets ChatWidget[]
  chatConversations ChatConversation[]
  products    Product[]
  productCategories ProductCategory[]
  orders      Order[]
  coupons     Coupon[]
  shopWidgets ShopWidget[]
}

// User management model

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  role        Role      @default(CLIENT_USER)
  tenantId    String?
  agencyId    String?
  clientId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  tenant      Tenant?   @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  agency      Agency?   @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  client      Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  
  // Chat relationships
  assignedConversations ChatConversation[] @relation("AssignedAgent")
  sentMessages ChatMessage[] @relation("MessageSender")
  
  // Shop relationships
  orders      Order[]
}

// Campaign models
model Campaign {
  id              String          @id @default(uuid())
  name            String
  description     String?
  type            String
  status          String          @default("draft")
  clientId        String
  createdById     String?
  scheduledAt     DateTime?
  sentAt          DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  analytics       CampaignAnalytics?
  segments        CampaignToSegment[]
}

model CampaignAnalytics {
  id              String          @id @default(uuid())
  campaignId      String          @unique
  sent            Int             @default(0)
  delivered       Int             @default(0)
  opened          Int             @default(0)
  clicked         Int             @default(0)
  replied         Int             @default(0)
  bounced         Int             @default(0)
  unsubscribed    Int             @default(0)
  conversions     Int             @default(0)
  revenue         Float           @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  campaign        Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model CampaignSegment {
  id              String          @id @default(uuid())
  name            String
  description     String?
  filterRules     Json?
  clientId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  campaigns       CampaignToSegment[]
}

model CampaignToSegment {
  campaignId      String
  segmentId       String
  createdAt       DateTime        @default(now())

  // Relationships
  campaign        Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  segment         CampaignSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@id([campaignId, segmentId])
}

// Chat models
model ChatWidget {
  id              String          @id @default(uuid())
  name            String
  clientId        String
  primaryColor    String          @default("#3B82F6")
  welcomeMessage  String          @default("Hello! How can we help you today?")
  offlineMessage  String          @default("We're currently offline. Leave a message and we'll get back to you.")
  position        String          @default("right")
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  conversations   ChatConversation[]
}

model ChatConversation {
  id              String          @id @default(uuid())
  visitorName     String?
  visitorEmail    String?
  widgetId        String?
  clientId        String
  status          ChatConversationStatus @default(OPEN)
  source          ChatSource      @default(WEBSITE)
  assignedToId    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  widget          ChatWidget?     @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  assignedTo      User?           @relation("AssignedAgent", fields: [assignedToId], references: [id], onDelete: SetNull)
  messages        ChatMessage[]
}

model ChatMessage {
  id              String          @id @default(uuid())
  conversationId  String
  content         String
  isFromVisitor   Boolean         @default(false)
  read            Boolean         @default(false)
  sentById        String?
  attachments     Json?
  createdAt       DateTime        @default(now())

  // Relationships
  conversation    ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sentBy          User?           @relation("MessageSender", fields: [sentById], references: [id], onDelete: SetNull)
}

// Shop models
model Product {
  id              String          @id @default(uuid())
  name            String
  description     String?
  price           Decimal
  sku             String?
  status          String          @default("ACTIVE")
  isFeatured      Boolean         @default(false)
  images          String[]
  inventory       Int?
  clientId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  categories      ProductToCategory[]
  variants        ProductVariant[]
  orderItems      OrderItem[]
  coupons         CouponToProduct[]
}

model ProductCategory {
  id              String          @id @default(uuid())
  name            String
  description     String?
  image           String?
  parentId        String?
  clientId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  parent          ProductCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children        ProductCategory[] @relation("CategoryHierarchy")
  products        ProductToCategory[]
  coupons         CouponToCategory[]
}

model ProductToCategory {
  productId       String
  categoryId      String
  createdAt       DateTime        @default(now())

  // Relationships
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  category        ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model ProductVariant {
  id              String          @id @default(uuid())
  name            String
  price           Decimal
  sku             String?
  inventory       Int?
  options         Json?
  productId       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
}

model Order {
  id              String          @id @default(uuid())
  orderNumber     String          @unique
  status          String          @default("PENDING")
  customerName    String?
  customerEmail   String?
  contactId       String?
  userId          String?
  couponCode      String?
  subtotal        Decimal
  discountTotal   Decimal         @default(0)
  shippingTotal   Decimal         @default(0)
  taxTotal        Decimal         @default(0)
  total           Decimal
  shippingAddress Json?
  billingAddress  Json?
  paymentMethod   String?
  paymentStatus   String?
  clientId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  events          OrderEvent[]
  coupon          Coupon?         @relation(fields: [couponCode], references: [code], onDelete: SetNull)
}

model OrderItem {
  id              String          @id @default(uuid())
  orderId         String
  productId       String?
  variantId       String?
  quantity        Int
  price           Decimal
  total           Decimal
  productName     String
  variantName     String?
  productOptions  Json?
  createdAt       DateTime        @default(now())

  // Relationships
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant         ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
}

model OrderEvent {
  id              String          @id @default(uuid())
  orderId         String
  type            String
  data            Json?
  createdAt       DateTime        @default(now())

  // Relationships
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Coupon {
  id              String          @id @default(uuid())
  code            String          @unique
  type            String          // PERCENTAGE, FIXED_AMOUNT, FREE_SHIPPING
  value           Decimal?        // Percentage or fixed amount value
  minOrderAmount  Decimal?
  maxUses         Int?
  usageCount      Int             @default(0)
  startDate       DateTime?
  endDate         DateTime?
  isActive        Boolean         @default(true)
  clientId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  products        CouponToProduct[]
  categories      CouponToCategory[]
  orders          Order[]
}

model CouponToProduct {
  couponId        String
  productId       String
  createdAt       DateTime        @default(now())

  // Relationships
  coupon          Coupon          @relation(fields: [couponId], references: [id], onDelete: Cascade)
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([couponId, productId])
}

model CouponToCategory {
  couponId        String
  categoryId      String
  createdAt       DateTime        @default(now())

  // Relationships
  coupon          Coupon          @relation(fields: [couponId], references: [id], onDelete: Cascade)
  category        ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([couponId, categoryId])
}

model ShopWidget {
  id              String          @id @default(uuid())
  name            String
  type            String          @default("PRODUCTS")
  isActive        Boolean         @default(true)
  theme           Json?
  settings        Json?
  allowedDomains  String[]        @default([])
  clientId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  client          Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  SUPER_ADMIN
  ADMIN
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_USER
  CLIENT_OWNER
  CLIENT_ADMIN
  CLIENT_USER
}

enum ChatConversationStatus {
  OPEN
  CLOSED
  PENDING
}

enum ChatSource {
  WEBSITE
  WHATSAPP
  FACEBOOK
  EMAIL
}
